{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/modules/TaskClass.ts"],"sourcesContent":["export default class TaskClass {\n    id: number; // Task identifier\n    userId: string; // User ID associated with the task\n    name: string; // Task name/title\n    date: string; // Task date (e.g., in YYYY-MM-DD format)\n    remarks: string | null; // Optional task remarks\n    completion: \"0%\" | \"50%\" | \"100%\"; // Task completion status\n    mark: \"\" | \"Failure\" | \"Pass\" | \"Satisfactory\" | \"Good\" | \"Excellent\"; // Task performance evaluation\n\n    constructor(\n        id: number,\n        userId: string,\n        name: string,\n        date: string,\n        remarks: string | null,\n        completion: \"0%\" | \"50%\" | \"100%\",\n        mark: \"\" | \"Failure\" | \"Pass\" | \"Satisfactory\" | \"Good\" | \"Excellent\",\n    ) {\n        this.id = id;\n        this.userId = userId;\n        this.name = name;\n        this.date = date;\n        this.remarks = remarks;\n        this.completion = completion;\n        this.mark = mark;\n    }\n\n    /**\n     * Converts the current TaskClass instance into a JSON-compatible object.\n     */\n    toJson(): object {\n        return {\n            id: this.id,\n            userId: this.userId,\n            name: this.name,\n            date: this.date,\n            remarks: this.remarks,\n            completion: this.completion,\n            mark: this.mark,\n        };\n    }\n\n    /**\n     * Static method to create a TaskClass instance from a JSON object.\n     */\n    static fromJson(json: any): TaskClass {\n        return new TaskClass(\n            json.id,\n            json.userId,\n            json.name,\n            json.date,\n            json.remarks || null,\n            json.completion as \"0%\" | \"50%\" | \"100%\",\n            json.mark as \"\" | \"Failure\" | \"Pass\" | \"Satisfactory\" | \"Good\" | \"Excellent\",\n        );\n    }\n}\n"],"names":[],"mappings":";;;AAAe,MAAM;IACjB,GAAW;IACX,OAAe;IACf,KAAa;IACb,KAAa;IACb,QAAuB;IACvB,WAAkC;IAClC,KAAsE;IAEtE,YACI,EAAU,EACV,MAAc,EACd,IAAY,EACZ,IAAY,EACZ,OAAsB,EACtB,UAAiC,EACjC,IAAqE,CACvE;QACE,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,IAAI,GAAG;IAChB;IAEA;;KAEC,GACD,SAAiB;QACb,OAAO;YACH,IAAI,IAAI,CAAC,EAAE;YACX,QAAQ,IAAI,CAAC,MAAM;YACnB,MAAM,IAAI,CAAC,IAAI;YACf,MAAM,IAAI,CAAC,IAAI;YACf,SAAS,IAAI,CAAC,OAAO;YACrB,YAAY,IAAI,CAAC,UAAU;YAC3B,MAAM,IAAI,CAAC,IAAI;QACnB;IACJ;IAEA;;KAEC,GACD,OAAO,SAAS,IAAS,EAAa;QAClC,OAAO,IAAI,UACP,KAAK,EAAE,EACP,KAAK,MAAM,EACX,KAAK,IAAI,EACT,KAAK,IAAI,EACT,KAAK,OAAO,IAAI,MAChB,KAAK,UAAU,EACf,KAAK,IAAI;IAEjB;AACJ"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/components/EditableTaskList.tsx"],"sourcesContent":["\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  ArrowDownTrayIcon,\n  ArrowUturnLeftIcon,\n  Battery0Icon,\n  Battery100Icon,\n  Battery50Icon,\n  CheckCircleIcon,\n  CheckIcon,\n  ClockIcon,\n  PencilSquareIcon,\n  PlusIcon,\n  TrashIcon,\n  XMarkIcon,\n} from \"@heroicons/react/24/outline\"; // Ensure you have Heroicons installed\nimport dayjs from \"dayjs\";\nimport TaskClass from \"@/modules/TaskClass\";\nimport UserClass from \"@/modules/UserClass\";\n\ninterface EditableTaskListProps {\n  user: UserClass;\n}\n\nconst EditableTaskList: React.FC<EditableTaskListProps> = ({ user }) => {\n  const [isLoading, setIsLoading] = useState(true); // Loading state\n  const [isUpdating, setUpdating] = useState(false); // Loading state\n  const [taskList, setTaskList] = useState<TaskClass[]>([]);\n  const [newTaskName, setNewTaskName] = useState<string>(\"\");\n  const [newTaskDate, setNewTaskDate] = useState<string>(\n    dayjs().format(\"YYYY-MM-DD\")\n  );\n  const [newTaskRemarks, setNewTaskRemarks] = useState<string>(\"\");\n  const [editIndex, setEditIndex] = useState<number | null>(null); // Track which task is in edit mode\n\n  interface NewTask {\n    name: string;\n    remarks: string;\n  }\n\n  const dailyTaskList: NewTask[] = [\n    { name: \"Eat on time\", remarks: \"Including breakfast, lunch and dinner\" },\n    { name: \"Sleep on time\", remarks: \"Sleep and wake up early\" },\n    {\n      name: \"Drinking Water\",\n      remarks: \"At least 8 cups of water need to be consumed daily\",\n    },\n    { name: \"Studying\", remarks: \"Learn something new everyday\" },\n    { name: \"Communication\", remarks: \"Talk to people around\" },\n    { name: \"Reading\", remarks: \"Read books or papers\" },\n    { name: \"Violin\", remarks: \"Need to practice playing violin everyday\" },\n    { name: \"Exercise\", remarks: \"Need to do exercise\" },\n    { name: \"Writing\", remarks: \"Write down the ideas and thought for today\" },\n    { name: \"Reflection\", remarks: \"Review what you have done today\" },\n  ];\n\n  useEffect(() => {\n    getTasksByDateFromDB(newTaskDate, user.id);\n  }, [newTaskDate, user.id]);\n\n  const importFrequentTaskList = async (list: NewTask[]) => {\n    setIsLoading(true);\n    const newTasks: TaskClass[] = [];\n    await Promise.all(\n      list.map(async (task) => {\n        if (task.name && task.remarks) {\n          const resTask = await insertNewTaskToDB(task.name, task.remarks);\n          if (resTask) {\n            newTasks.push(resTask);\n          }\n        }\n      })\n    );\n    const updateTasks: TaskClass[] = [...taskList, ...newTasks];\n    console.log(updateTasks);\n    setTaskList(updateTasks);\n    setIsLoading(false);\n  };\n\n  const submitNewTaskList = async (name: string, remarks: string) => {\n    setIsLoading(true);\n    const newTask = await insertNewTaskToDB(name, remarks);\n    if (newTask) {\n      const updatedTasks = [...taskList, newTask];\n      setTaskList(updatedTasks);\n    }\n    // Reset the form inputs for the new task\n    resetNewTaskInputs();\n    setIsLoading(false);\n  };\n\n  const getTasksByDateFromDB = async (date: string, userId: string) => {\n    try {\n      // Construct the query parameters\n      const queryParams = new URLSearchParams({\n        date, // Task date\n        userId, // User ID\n      });\n\n      // Make the GET request\n      const res = await fetch(`/api/tasks/get_task?${queryParams.toString()}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      // Handle non-OK responses\n      if (!res.ok) {\n        const errorResponse = await res.json();\n        throw new Error(errorResponse.error || \"Failed to fetch tasks\");\n      }\n\n      // Parse and return the results\n      const data = await res.json();\n      // console.log(data);\n      // Convert each task object into an instance of TaskClass\n      const tasks = data.map((task: any) => {\n        return new TaskClass(\n          task.id, // Task ID\n          task.user_id, // User ID\n          task.name, // Task name\n          task.date, // Task date\n          task.remarks, // Remarks\n          task.completion, // Completion percentage\n          task.mark // Mark\n        );\n      });\n\n      // Set the task list state with the TaskClass instances\n      setTaskList(tasks);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching tasks by date:\", error);\n      throw new Error(\"Failed to fetch tasks by date. Please try again.\");\n    }\n  };\n\n  const deleteTaskByIdFromDB = async (taskId: number, userId: string) => {\n    try {\n      // Build the query parameters\n      const params = new URLSearchParams();\n      params.append(\"taskId\", taskId.toString());\n      params.append(\"userId\", userId);\n\n      // Send DELETE request to the backend\n      const res = await fetch(`/api/tasks/delete_task?${params.toString()}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      // Throw an error if the response is not OK\n      if (!res.ok) {\n        const errorResponse = await res.json();\n        throw new Error(errorResponse.error || \"Failed to delete task\");\n      }\n\n      // Return the success message\n      const data = await res.json();\n      return data;\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      throw new Error(\"Failed to delete task. Please try again.\");\n    }\n  };\n\n  const handleTaskChange = (\n    taskId: number,\n    updatedTask: Partial<TaskClass>\n  ) => {\n    setUpdating(true);\n    const index = taskList.findIndex((task) => task.id === taskId);\n    const updatedTasks = [...taskList];\n    const existingTask = updatedTasks[index];\n    updatedTasks[index] = new TaskClass(\n      existingTask.id,\n      existingTask.userId,\n      \"name\" in updatedTask ? updatedTask.name! : existingTask.name,\n      \"date\" in updatedTask ? updatedTask.date! : existingTask.date,\n      \"remarks\" in updatedTask ? updatedTask.remarks! : existingTask.remarks,\n      \"completion\" in updatedTask\n        ? updatedTask.completion!\n        : existingTask.completion,\n      \"mark\" in updatedTask ? updatedTask.mark! : existingTask.mark\n    );\n    updateTaskByIdFromDB(updatedTasks[index]);\n    setTaskList(updatedTasks);\n  };\n\n  const insertNewTaskToDB = async (\n    newTaskName: string,\n    newTaskRemarks: string\n  ): Promise<TaskClass | undefined> => {\n    // Create a new task instance with a temporary placeholder ID (-1)\n    const newTask = new TaskClass(\n      -1, // Placeholder ID (will be updated after backend response)\n      user.id, // User ID from state or props\n      newTaskName, // Name of the new task\n      newTaskDate, // Date of the new task\n      newTaskRemarks, // Remarks for the new task\n      \"0%\", // Default completion status\n      \"Failure\" // Default mark (empty for initial creation)\n    );\n\n    try {\n      // Make an API call to save the task on the backend\n      const res = await fetch(\"/api/tasks/add_task\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(newTask),\n      });\n\n      // Assuming the backend sends back the new task ID in the response\n      const data = await res.json();\n\n      // Update the task object with the real ID from the backend\n      newTask.id = data.taskId;\n\n      // console.log(\"Task added successfully:\", newTask);\n      return newTask;\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n      alert(\"Failed to add task. Please try again.\");\n    }\n  };\n\n  const updateTaskByIdFromDB = async (updatedTask: TaskClass) => {\n    try {\n      // Send the PUT request to the update API\n      const response = await fetch(\"/api/tasks/update_task\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(updatedTask),\n      });\n      // Parse the response\n      const data = await response.json();\n\n      if (!response.ok) {\n        // Handle error from the API if the update wasn't successful\n        console.error(\"Error updating task:\", data.error);\n        return;\n      }\n      setUpdating(false);\n    } catch (err) {\n      console.error(\"Error during task update:\", err);\n    }\n  };\n\n  const resetNewTaskInputs = () => {\n    setNewTaskName(\"\");\n    setNewTaskDate(dayjs().format(\"YYYY-MM-DD\"));\n    setNewTaskRemarks(\"\");\n  };\n\n  const clickDelete = (taskId: number) => {\n    deleteTaskByIdFromDB(taskId, user.id);\n    // const updatedTasks = taskList.filter((_, i) => i !== index);\n    const updatedTasks = taskList.filter((task) => task.id !== taskId);\n\n    setTaskList(updatedTasks);\n  };\n\n  const toggleEdit = (index: number) => {\n    if (editIndex === index) {\n      setEditIndex(null); // Toggle off edit mode\n    } else {\n      setEditIndex(index); // Set the task as editable\n    }\n  };\n\n  return (\n    <div className=\"my-6 space-y-4\">\n      <div className=\"flex items-center justify-center space-x-2\">\n        <div className=\"flex-grow\">\n          <label htmlFor=\"newTaskName\" className=\"text-sm\">\n            Task Title\n          </label>\n          <input\n            type=\"text\"\n            value={newTaskName}\n            onChange={(e) => setNewTaskName(e.target.value)}\n            // placeholder=\"Task Name\"\n            className=\"bg-black-white-50 mr-2 w-full px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-400\"\n          />\n        </div>\n        <div className=\"flex-grow\">\n          <label htmlFor=\"newTaskName\" className=\"text-sm\">\n            Remarks\n          </label>\n          <input\n            type=\"text\"\n            value={newTaskRemarks}\n            onChange={(e) => setNewTaskRemarks(e.target.value)}\n            // placeholder=\"Remarks\"\n            className=\"bg-black-white-50 mr-2 w-full px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-400\"\n          />\n        </div>\n        <div className=\"flex items-center justify-center\">\n          {isLoading ? (\n            <>\n              <div className=\"p-2 rounded text-gray-300\">\n                <PlusIcon className=\"h-6 w-6\" />\n                <label htmlFor=\"newTaskName\" className=\"text-sm\">\n                  Add\n                </label>\n              </div>\n              {taskList.length < 1 && (\n                <div className=\"p-2 rounded text-gray-300\">\n                  <ArrowDownTrayIcon className=\"h-6 w-6\" />\n                  <label htmlFor=\"newTaskName\" className=\"text-sm\">\n                    Import\n                  </label>\n                </div>\n              )}\n            </>\n          ) : (\n            <>\n              <button\n                onClick={() => submitNewTaskList(newTaskName, newTaskRemarks)}\n                className=\"p-2 rounded\"\n              >\n                <PlusIcon className=\"h-6 w-6\" />\n                <label htmlFor=\"newTaskName\" className=\"text-sm\">\n                  Add\n                </label>\n              </button>\n              {taskList.length < 1 && (\n                <button\n                  onClick={() => importFrequentTaskList(dailyTaskList)}\n                  className=\"p-2 rounded\"\n                >\n                  <ArrowDownTrayIcon className=\"h-6 w-6\" />\n                  <label htmlFor=\"newTaskName\" className=\"text-sm\">\n                    Import\n                  </label>\n                </button>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n      <div className=\" h-96 overflow-y-auto\">\n        {isLoading ? (\n          <div className=\"flex w-full h-full items-center justify-center text-lg\">\n            Loading\n          </div>\n        ) : (\n          <>\n            {taskList.length < 1 ? (\n              <div className=\"flex w-full h-full items-center justify-center text-lg\">\n                Haven't plan anything yet UwU\n              </div>\n            ) : (\n              <table className=\"w-full border-b\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left px-4 py-2 font-bold\">\n                      <span className=\"m-2 block\">Name</span>\n                    </th>\n                    <th className=\"text-left px-4 py-2 font-bold\">\n                      <span className=\"m-2 block\">Remarks</span>\n                    </th>\n                    <th className=\"text-left px-4 py-2 font-bold\">\n                      <span className=\"m-2 block\">Completion</span>\n                    </th>\n                    <th className=\"text-left px-4 py-2 font-bold\">\n                      <span className=\"m-2 block\">Mark</span>\n                    </th>\n                    <th className=\"text-left px-4 py-2 font-bold\">\n                      <span className=\"m-2 block\">Actions</span>\n                    </th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {taskList.map((task) => (\n                    <tr key={task.id} className=\"hover:bg-white/15\">\n                      <td className=\"px-4 py-2\">\n                        {editIndex === task.id ? (\n                          <input\n                            type=\"text\"\n                            value={task.name}\n                            onChange={(e) =>\n                              handleTaskChange(task.id, {\n                                name: e.target.value,\n                              })\n                            }\n                            className=\"w-full bg-transparent m-2 block\" // Set input background to transparent\n                          />\n                        ) : (\n                          <span className=\"m-2 block\">{task.name}</span>\n                        )}\n                      </td>\n                      <td className=\"px-4 py-2 text-xs \">\n                        {editIndex === task.id ? (\n                          <input\n                            type=\"text\"\n                            value={task.remarks ?? \"\"}\n                            onChange={(e) =>\n                              handleTaskChange(task.id, {\n                                remarks: e.target.value,\n                              })\n                            }\n                            className=\"w-full bg-transparent m-2 block\" // Set input background to transparent\n                          />\n                        ) : (\n                          <span className=\"m-2 block\">\n                            {task.remarks}\n                          </span>\n                        )}\n                      </td>\n                      {/* Task Completion Bar */}\n\n                      <td className=\"px-4 py-2\">\n                        {editIndex === task.id ? (\n                          <div className=\"flex w-full space-x-2 m-2\">\n                            <button\n                              className=\"hover:text-red-500\"\n                              onClick={() => {\n                                handleTaskChange(task.id, { completion: \"0%\" });\n                                setEditIndex(null);\n                              }}\n                            >\n                              <Battery0Icon className=\"h-6 w-6\" />\n                            </button>\n                            <button\n                              className=\"hover:text-yellow-500\"\n                              onClick={() => {\n                                handleTaskChange(task.id, {\n                                  completion: \"50%\",\n                                });\n                                setEditIndex(null);\n                              }}\n                            >\n                              <Battery50Icon className=\"h-6 w-6\" />\n                            </button>\n                            <button\n                              className=\"hover:text-green-500\"\n                              onClick={() => {\n                                handleTaskChange(task.id, {\n                                  completion: \"100%\",\n                                });\n                                setEditIndex(null);\n                              }}\n                            >\n                              <Battery100Icon className=\"h-6 w-6\" />\n                            </button>\n                          </div>\n                        ) : (\n                          <div className=\"relative bg-black-white-50 rounded-lg h-6 m-2 block\">\n                            {/* Progress Bar Filler */}\n                            <div\n                              className=\"h-6 bg-yellow-500 rounded-lg transition-all duration-300\"\n                              style={{ width: `${task.completion}` }} // Added percentage symbol\n                            ></div>\n\n                            {/* Progress Text Overlay */}\n                            <div className=\"absolute inset-0 flex items-center justify-center\">\n                              <span className=\"font-bold\">\n                                {task.completion}\n                              </span>\n                            </div>\n                          </div>\n                        )}\n                      </td>\n                      <td className=\"px-4 py-2\">\n                        <span className=\"m-2 block\">\n                          {task.mark === \"Failure\" ? \"None\" : task.mark}\n                        </span>\n                      </td>\n                      <td className=\"px-4 py-2\">\n                        {editIndex === task.id ? (\n                          <>\n                            {isUpdating ? (\n                              <>\n                                <div className=\"flex space-x-2\">\n                                  <ArrowUturnLeftIcon className=\"h-6 w-6\" />\n\n                                  <TrashIcon className=\"h-6 w-6\" />\n                                </div>\n                              </>\n                            ) : (\n                              <div className=\"flex space-x-2 m-2 block\">\n                                <button onClick={() => toggleEdit(task.id)}>\n                                  <ArrowUturnLeftIcon className=\"h-6 w-6 text-blue-500\" />\n                                </button>\n                                <button onClick={() => clickDelete(task.id)}>\n                                  <TrashIcon className=\"h-6 w-6 text-red-500\" />\n                                </button>\n                              </div>\n                            )}\n                          </>\n                        ) : (\n                          <div className=\"m-2 block\">\n                            <button onClick={() => toggleEdit(task.id)}>\n                              <PencilSquareIcon className=\"h-6 w-6\" />\n                            </button>\n                          </div>\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EditableTaskList;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 895, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 901, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/components/ReadOnlyTaskList.tsx"],"sourcesContent":["\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport dayjs from \"dayjs\";\nimport TaskClass from \"@/modules/TaskClass\";\nimport UserClass from \"@/modules/UserClass\";\n\ninterface ReadOnlyTaskListProps {\n  user: UserClass;\n  date: string;\n}\n\nconst ReadOnlyTaskList: React.FC<ReadOnlyTaskListProps> = ({ user, date }) => {\n  const [isLoading, setIsLoading] = useState(true); // Loading state\n  const [taskList, setTaskList] = useState<TaskClass[]>([]);\n  const [taskDate, setTaskDate] = useState<string>(date);\n\n  useEffect(() => {\n    getTasksByDate(taskDate, user.id);\n  }, [taskDate, user.id]);\n\n  const getTasksByDate = async (date: string, userId: string) => {\n    try {\n      // Construct the query parameters\n      const queryParams = new URLSearchParams({\n        date, // Task date\n        userId, // User ID\n      });\n\n      // Make the GET request\n      const res = await fetch(`/api/tasks/get_task?${queryParams.toString()}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      // Handle non-OK responses\n      if (!res.ok) {\n        const errorResponse = await res.json();\n        throw new Error(errorResponse.error || \"Failed to fetch tasks\");\n      }\n\n      // Parse and return the results\n      const data = await res.json();\n      // console.log(data);\n      // Convert each task object into an instance of TaskClass\n      const tasks = data.map((task: any) => {\n        return new TaskClass(\n          task.id, // Task ID\n          task.user_id, // User ID\n          task.name, // Task name\n          task.date, // Task date\n          task.remarks, // Remarks\n          task.completion, // Completion percentage\n          task.mark // Mark\n        );\n      });\n\n      // Set the task list state with the TaskClass instances\n      setTaskList(tasks);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching tasks by date:\", error);\n      throw new Error(\"Failed to fetch tasks by date. Please try again.\");\n    }\n  };\n\n  const handleTaskChange = (index: number, updatedTask: Partial<TaskClass>) => {\n    const updatedTasks = [...taskList];\n    const existingTask = updatedTasks[index];\n    updatedTasks[index] = new TaskClass(\n      existingTask.id,\n      existingTask.userId,\n      \"name\" in updatedTask ? updatedTask.name! : existingTask.name,\n      \"date\" in updatedTask ? updatedTask.date! : existingTask.date,\n      \"remarks\" in updatedTask ? updatedTask.remarks! : existingTask.remarks,\n      \"completion\" in updatedTask\n        ? updatedTask.completion!\n        : existingTask.completion,\n      \"mark\" in updatedTask ? updatedTask.mark! : existingTask.mark\n    );\n    setTaskList(updatedTasks);\n  };\n\n  return (\n    <div className=\" h-96 overflow-y-auto\">\n      {isLoading ? (\n        <div className=\"flex w-full h-full items-center justify-center text-lg\">\n          Loading\n        </div>\n      ) : (\n        <>\n          {taskList.length < 1 ? (\n            <div className=\"flex w-full h-full items-center justify-center text-lg\">\n              There is nothing left UwU\n            </div>\n          ) : (\n            <table className=\"w-full border-b\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left px-4 py-2 font-bold\">\n                    <span className=\"m-2 block\">Name</span>\n                  </th>\n                  <th className=\"text-left px-4 py-2 font-bold\">\n                    <span className=\"m-2 block\">Remarks</span>\n                  </th>\n                  <th className=\"text-left px-4 py-2 font-bold\">\n                    <span className=\"m-2 block\">Completion</span>\n                  </th>\n                  <th className=\"text-left px-4 py-2 font-bold\">\n                    <span className=\"m-2 block\">Mark</span>\n                  </th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {taskList.map((task) => (\n                  <tr key={task.id} className={`hover:bg-white/15 ${task.mark === 'Failure' && 'text-red-500'}`}>\n                    <td className=\"px-4 py-2\">\n                      <span className=\"m-2 block\">{task.name}</span>\n                    </td>\n                    <td className=\"px-4 py-2\">\n                      <span className=\"text-xs m-2 block\">{task.remarks}</span>\n                    </td>\n                    {/* Task Completion Bar */}\n\n                    <td className=\"px-4 py-2\">\n                      <div className=\"relative bg-black-white-50 rounded-lg h-6 m-2 block\">\n                        {/* Progress Bar Filler */}\n                        <div\n                          className=\"h-6 bg-yellow-500 rounded-lg transition-all duration-300\"\n                          style={{ width: `${task.completion}` }} // Added percentage symbol\n                        ></div>\n\n                        {/* Progress Text Overlay */}\n                        <div className=\"absolute inset-0 flex items-center justify-center\">\n                          <span className=\"font-bold\">{task.completion}</span>\n                        </div>\n                      </div>\n                    </td>\n                    <td className={`px-4 py-2`}>\n                      <span className=\"m-2 block\">\n                        {task.mark}\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ReadOnlyTaskList;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1174, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1180, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/components/Cube.tsx"],"sourcesContent":["\"use client\";\nimport React, { useEffect, useState } from \"react\";\nimport { LightBulbIcon, XMarkIcon } from \"@heroicons/react/24/outline\"; // Ensure you have Heroicons installed\nimport dayjs from \"dayjs\";\nimport \"@/app/styles/light-container-style.css\";\nimport CubeClass from \"@/modules/CubeClass\";\nimport EditableTaskList from \"./EditableTaskList\";\nimport UserClass from \"@/modules/UserClass\";\nimport ReadOnlyTaskList from \"./ReadOnlyTaskList\";\nimport TaskClass from \"@/modules/TaskClass\";\nimport { useRouter } from \"next/navigation\";\n\ninterface CubeProps {\n  order: number;\n  user: UserClass;\n  cube: CubeClass; // Unique identifier for the container\n}\n\nconst Cube: React.FC<CubeProps> = ({ order: key, user, cube }) => {\n  const [isWidgetOpen, setIsWidgetOpen] = useState<boolean>(false);\n  const [index, setIndex] = useState(0);\n  const [currentDate, setCurrentDate] = useState<string>(\n    dayjs().format(\"YYYY-MM-DD\")\n  );\n  const router = useRouter();\n\n  const emoji = [\"▔＾▔\", \"▔▽▔\"];\n\n  const handleRedirect = () => {\n    // Redirect to the chat page with date and userId as query parameters\n    router.push(\n      `/chat?date=${encodeURIComponent(cube.date)}&userId=${encodeURIComponent(\n        user.id\n      )}`\n    );\n  };\n\n  // Function to determine the background classes\n  const getBackgroundClass = (date: string, currentDate: string) => {\n    if (date === currentDate && cube.percentage === 0) {\n      return \"opening-bg\"; // Apply animation class for current date\n    } else {\n      if (cube.id !== -1) {\n        return getColorByPercentage(cube.percentage); // Highlight selected date\n      }\n    }\n  };\n\n  const getColorByPercentage = (percentage: number): string => {\n    console.log(percentage);\n    if (percentage >= 80) {\n      return \"text-green-500 bg-green-500/20\"; // Almost complete\n    } else if (percentage >= 60) {\n      return \"text-green-500 bg-lime-500/20\"; // Almost complete\n    } else if (percentage >= 40) {\n      return \"text-yellow-500 bg-yellow-500/20\"; // Halfway\n    } else if (percentage >= 20) {\n      return \"text-orange-500 bg-orange-500/20\"; // Making progress\n    } else {\n      return \"text-red-500 bg-red-500/20\"; // Very little progress\n    }\n  };\n\n  if (cube) {\n    return (\n      <>\n        <div\n          id={`${key}`}\n          className={`m-1 flex flex-col items-center justify-center aspect-square ${getBackgroundClass(\n            cube.date,\n            currentDate\n          )} cursor-pointer transition duration-200 ease-in-out rounded-xl ${\n            cube.date !== currentDate && \"hover:text-white\"\n          } hover:bg-yellow-500 ${\n            cube.id !== -1 ? \"backdrop-blur-sm shadow-sm\":\"shadow-inner bg-black-white-10\"\n          }`}\n          onClick={() => setIsWidgetOpen(true)}\n          onMouseOver={() => setIndex(1)}\n          onMouseLeave={() => setIndex(0)}\n        >\n          {cube.date === currentDate ? (\n            <div className=\"flex flex-col items-center\">\n              <p className=\"text-3xl mt-6\">{emoji[index]}</p>\n              <p className=\"text-xs\">TODAY</p>\n            </div>\n          ) : (\n            <div className=\"flex flex-col items-center opacity-50\">\n              {cube.id === -1 ? (\n                <>\n                  <p className=\"text-6xl\">∅</p>\n                  <p className=\"text-xs\">{cube.date}</p>\n                </>\n              ) : (\n                <>\n                  <p className=\"text-4xl\">\n                    {cube.percentage.toFixed(1)}\n                    <span className=\"text-sm\">%</span>\n                  </p>\n                  <p className=\"text-xs\">{cube.date}</p>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n        {isWidgetOpen && (\n          <div className=\"bg-black-white-10 fixed h-full w-full inset-0 flex items-center justify-center backdrop-blur-xs z-50\">\n            <div className=\"flex items-center justify-between w-2/3 bg-black-white-10 backdrop-blur-md p-6 rounded-xl shadow-lg\">\n              <div className=\"w-full\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h2 className=\"text-4xl font-bold mb-2\">\n                      Daily Energy Efficiency\n                    </h2>\n                    <p className=\"mb-2\">{cube.date}</p>\n                  </div>\n                  <div className=\"space-x-4 mb-2\">\n                    {cube.date === currentDate && (\n                      <button onClick={handleRedirect}>\n                        <div className=\"rounded-xl p-2 hover:text-yellow-500 hover:border-yellow-500\">\n                          <LightBulbIcon className=\"h-10 w-10 \" />\n                        </div>\n                      </button>\n                    )}\n\n                    <button\n                      onClick={() => {\n                        console.log(\"asda\");\n                        setIsWidgetOpen(false);\n                      }}\n                    >\n                      <div className=\"rounded-xl p-2 hover:text-red-500 hover:border-red-500\">\n                        <XMarkIcon className=\"h-10 w-10\" />\n                      </div>\n                    </button>\n                  </div>\n                </div>\n\n                <div>\n                  {cube.date === currentDate ? (\n                    <EditableTaskList user={user} />\n                  ) : (\n                    <ReadOnlyTaskList user={user} date={cube.date} />\n                  )}\n                  {/* <div>{cube.percentage}</div> */}\n                  <div className=\"relative bg-black-white-50 rounded-lg h-6 m-2 block\">\n                    {/* Progress Bar Filler */}\n                    <div\n                      className=\"h-6 bg-yellow-500 rounded-lg transition-all duration-300\"\n                      style={{ width: `${cube.percentage}%` }} // Added percentage symbol\n                    ></div>\n\n                    {/* Progress Text Overlay */}\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <span className=\"font-bold\">\n                        {cube.percentage.toFixed(2)}%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </>\n    );\n  } else return <></>;\n};\n\nexport default Cube;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1505, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1511, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/modules/CubeClass.ts"],"sourcesContent":["// /models/cube.ts\nimport TaskClass from './TaskClass'; // Import TaskClass\n\nexport default class CubeClass {\n    id: number; // Unique identifier for the cube\n    userId: string; // User ID associated with the task\n    name: string; // Name of the cube\n    date: string; // Date associated with the cube (e.g., YYYY-MM-DD)\n    percentage: number; // Calculated percentage of task completions\n    status: \"OPENING\" | \"CLOSED\"; // Status of the cube\n\n    constructor(\n        id: number,\n        userId: string,\n        name: string,\n        date: string,\n        percentage: number,\n        status: \"OPENING\" | \"CLOSED\",\n    ) {\n        this.id = id;\n        this.userId = userId;\n        this.name = name;\n        this.date = date;\n        this.percentage = percentage;\n        this.status = status;\n    }\n\n    // Method to calculate the percentage of task completions\n    public calculatePercentage(TaskList: TaskClass[]): number {\n        if (TaskList.length === 0) return 0; // Avoid division by zero\n\n        const totalCompletion = TaskList.reduce((sum, task) => {\n            // Parse the completion string to a number\n            const completionValue = parseInt(task.completion);\n            return sum + (isNaN(completionValue) ? 0 : completionValue);\n        }, 0);\n\n        return totalCompletion / TaskList.length; // Return the average\n    }\n\n    // Method to determine the status based on the date\n    private determineStatus(): \"OPENING\" | \"CLOSED\" {\n        const now = new Date();\n        const cubeDate = new Date(this.date);\n\n        return cubeDate < now ? \"CLOSED\" : \"OPENING\"; // Set status based on the date comparison\n    }\n\n    // Method to convert the instance to JSON\n    toJson(): object {\n        return {\n            id: this.id,\n            userId: this.userId,\n            name: this.name,\n            date: this.date,\n            percentage: this.percentage,\n            status: this.status,\n        };\n    }\n\n    // Static method to create an instance from JSON\n    static fromJson(json: any): CubeClass {\n        return new CubeClass(\n            json.id,\n            json.userId,\n            json.name,\n            json.date,\n            json.percentage,\n            json.status as \"OPENING\" | \"CLOSED\",\n        );\n    }\n}\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAGH,MAAM;IACjB,GAAW;IACX,OAAe;IACf,KAAa;IACb,KAAa;IACb,WAAmB;IACnB,OAA6B;IAE7B,YACI,EAAU,EACV,MAAc,EACd,IAAY,EACZ,IAAY,EACZ,UAAkB,EAClB,MAA4B,CAC9B;QACE,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,MAAM,GAAG;IAClB;IAEA,yDAAyD;IAClD,oBAAoB,QAAqB,EAAU;QACtD,IAAI,SAAS,MAAM,KAAK,GAAG,OAAO,GAAG,yBAAyB;QAE9D,MAAM,kBAAkB,SAAS,MAAM,CAAC,CAAC,KAAK;YAC1C,0CAA0C;YAC1C,MAAM,kBAAkB,SAAS,KAAK,UAAU;YAChD,OAAO,MAAM,CAAC,MAAM,mBAAmB,IAAI,eAAe;QAC9D,GAAG;QAEH,OAAO,kBAAkB,SAAS,MAAM,EAAE,qBAAqB;IACnE;IAEA,mDAAmD;IAC3C,kBAAwC;QAC5C,MAAM,MAAM,IAAI;QAChB,MAAM,WAAW,IAAI,KAAK,IAAI,CAAC,IAAI;QAEnC,OAAO,WAAW,MAAM,WAAW,WAAW,0CAA0C;IAC5F;IAEA,yCAAyC;IACzC,SAAiB;QACb,OAAO;YACH,IAAI,IAAI,CAAC,EAAE;YACX,QAAQ,IAAI,CAAC,MAAM;YACnB,MAAM,IAAI,CAAC,IAAI;YACf,MAAM,IAAI,CAAC,IAAI;YACf,YAAY,IAAI,CAAC,UAAU;YAC3B,QAAQ,IAAI,CAAC,MAAM;QACvB;IACJ;IAEA,gDAAgD;IAChD,OAAO,SAAS,IAAS,EAAa;QAClC,OAAO,IAAI,UACP,KAAK,EAAE,EACP,KAAK,MAAM,EACX,KAAK,IAAI,EACT,KAAK,IAAI,EACT,KAAK,UAAU,EACf,KAAK,MAAM;IAEnB;AACJ"}},
    {"offset": {"line": 1562, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1568, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/components/StarBackground.tsx"],"sourcesContent":["// src/app/test/page.tsx\n\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\n\nconst StarBackground: React.FC = () => {\n\n  const canvasRef = useRef<HTMLCanvasElement | null>(null); // Canvas reference\n  // Get CSS variables for background and foreground\n  const rootStyles = getComputedStyle(document.documentElement);\n  const background =\n    rootStyles.getPropertyValue(\"--background\").trim() || \"defaultBackground\"; // Fallback value\n  const foreground =\n    rootStyles.getPropertyValue(\"--foreground\").trim() || \"defaultForeground\"; // Fallback value\n  // Background animation (stars)\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const stars: { x: number; y: number; radius: number }[] = [];\n    const numStars = 200;\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    // Generate stars\n    for (let i = 0; i < numStars; i++) {\n      stars.push({\n        x: Math.random() * canvas.width,\n        y: Math.random() * canvas.height,\n        radius: Math.random() * 2,\n      });\n    }\n\n    const drawStars = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.fillStyle = foreground;\n      stars.forEach((star) => {\n        ctx.beginPath();\n        ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\n        ctx.fill();\n      });\n    };\n\n    const updateStars = () => {\n      stars.forEach((star) => {\n        star.y += 0.5;\n        if (star.y > canvas.height) {\n          star.y = 0;\n          star.x = Math.random() * canvas.width;\n        }\n      });\n    };\n\n    const animate = () => {\n      drawStars();\n      updateStars();\n      requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    // Handle resizing\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  return (\n    <>\n      <canvas\n        ref={canvasRef}\n        className=\"absolute top-0 left-0 w-full h-full -z-10\"\n      ></canvas>\n    </>\n  );\n};\n\nexport default StarBackground;\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;;AAGxB;AAFA;;;AAIA,MAAM,iBAA2B;IAE/B,MAAM,YAAY,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAA4B,OAAO,mBAAmB;IAC7E,kDAAkD;IAClD,MAAM,aAAa,iBAAiB,SAAS,eAAe;IAC5D,MAAM,aACJ,WAAW,gBAAgB,CAAC,gBAAgB,IAAI,MAAM,qBAAqB,iBAAiB;IAC9F,MAAM,aACJ,WAAW,gBAAgB,CAAC,gBAAgB,IAAI,MAAM,qBAAqB,iBAAiB;IAC9F,+BAA+B;IAE/B,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,SAAS,UAAU,OAAO;QAChC,IAAI,CAAC,QAAQ;QAEb,MAAM,MAAM,OAAO,UAAU,CAAC;QAC9B,IAAI,CAAC,KAAK;QAEV,MAAM,QAAoD,EAAE;QAC5D,MAAM,WAAW;QAEjB,OAAO,KAAK,GAAG,OAAO,UAAU;QAChC,OAAO,MAAM,GAAG,OAAO,WAAW;QAElC,iBAAiB;QACjB,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,IAAK;YACjC,MAAM,IAAI,CAAC;gBACT,GAAG,KAAK,MAAM,KAAK,OAAO,KAAK;gBAC/B,GAAG,KAAK,MAAM,KAAK,OAAO,MAAM;gBAChC,QAAQ,KAAK,MAAM,KAAK;YAC1B;QACF;QAEA,MAAM,YAAY;YAChB,IAAI,SAAS,CAAC,GAAG,GAAG,OAAO,KAAK,EAAE,OAAO,MAAM;YAC/C,IAAI,SAAS,GAAG;YAChB,MAAM,OAAO,CAAC,CAAC;gBACb,IAAI,SAAS;gBACb,IAAI,GAAG,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,MAAM,EAAE,GAAG,KAAK,EAAE,GAAG;gBAClD,IAAI,IAAI;YACV;QACF;QAEA,MAAM,cAAc;YAClB,MAAM,OAAO,CAAC,CAAC;gBACb,KAAK,CAAC,IAAI;gBACV,IAAI,KAAK,CAAC,GAAG,OAAO,MAAM,EAAE;oBAC1B,KAAK,CAAC,GAAG;oBACT,KAAK,CAAC,GAAG,KAAK,MAAM,KAAK,OAAO,KAAK;gBACvC;YACF;QACF;QAEA,MAAM,UAAU;YACd;YACA;YACA,sBAAsB;QACxB;QAEA;QAEA,kBAAkB;QAClB,MAAM,eAAe;YACnB,OAAO,KAAK,GAAG,OAAO,UAAU;YAChC,OAAO,MAAM,GAAG,OAAO,WAAW;QACpC;QAEA,OAAO,gBAAgB,CAAC,UAAU;QAElC,OAAO;YACL,OAAO,mBAAmB,CAAC,UAAU;QACvC;IACF,GAAG,EAAE;IAEL,qBACE;kBACE,cAAA,8OAAC;YACC,KAAK;YACL,WAAU;;;;;;;AAIlB;uCAEe"}},
    {"offset": {"line": 1647, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1653, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/components/LoadingPage.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface LoadingPageProps {\n  processing: number; // Progress percentage (0–100)\n}\n\nconst LoadingPage: React.FC<LoadingPageProps> = ({ processing }) => {\n  return (\n    <div className=\"h-screen flex flex-col items-center justify-center opening-bg\">\n      {/* \"LOADING\" Text */}\n      <span className=\"text-6xl text-white mb-6\">LOADING</span>\n\n      {/* Processing Bar */}\n      <div className=\"w-1/2 h-4 border-2 border-white rounded-full overflow-hidden\">\n        <div\n          className=\"h-full bg-white transition-all duration-150\"\n          style={{ width: `${processing}%` }} // Set width dynamically\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingPage;\n"],"names":[],"mappings":";;;;;AAMA,MAAM,cAA0C,CAAC,EAAE,UAAU,EAAE;IAC7D,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAK,WAAU;0BAA2B;;;;;;0BAG3C,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBACC,WAAU;oBACV,OAAO;wBAAE,OAAO,GAAG,WAAW,CAAC,CAAC;oBAAC;;;;;;;;;;;;;;;;;AAK3C;uCAEe"}},
    {"offset": {"line": 1695, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1701, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/app/solar-panels/page.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState, useEffect, JSX } from \"react\";\nimport dayjs from \"dayjs\";\nimport UserClass from \"@/modules/UserClass\";\nimport LoadingCircle from \"@/components/LoadingCircle\";\nimport { SunIcon } from \"@heroicons/react/24/outline\"; // Removed unused icons\nimport Cube from \"@/components/Cube\";\nimport CubeClass from \"@/modules/CubeClass\";\nimport TaskClass from \"@/modules/TaskClass\";\nimport StarBackground from \"@/components/StarBackground\";\nimport LoadingPage from \"@/components/LoadingPage\";\n\nconst SolarPanels: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [userData, setUserData] = useState<UserClass>();\n  const [dateNum, setDateNum] = useState(100);\n  const [dates, setDates] = useState<string[]>([]);\n  const [existingCubeList, setExistingCubeList] = useState<CubeClass[]>([]);\n  const [cubeList, setCubeList] = useState<CubeClass[]>([]);\n  const [birthDate, setBirthDate] = useState<string>(\"2025-02-01\");\n  const [currentDate] = useState<string>(dayjs().format(\"YYYY-MM-DD\"));\n  const [selectedDate] = useState<string>(currentDate);\n  const [processing, setProcessing] = useState(0); \n\n  // useEffect(() => {\n  //   const fetchUserData = () => {\n  //     try {\n  //       const storedData = localStorage.getItem(\"DATA:USER\");\n  //       if (storedData) {\n  //         const parsedData = JSON.parse(storedData);\n  //         setUserData(UserClass.fromJson(parsedData));\n  //       }\n  //     } catch (error) {\n  //       console.log(\"error on userdata\");\n  //     }\n  //   };\n  //   setTimeout(fetchUserData, 1500);\n  // }, []);\n\n  useEffect(() => {\n    const fetchUserData = () => {\n      try {\n        const storedData = localStorage.getItem(\"DATA:USER\");\n        if (storedData) {\n          const parsedData = JSON.parse(storedData);\n          console.log(parsedData);\n          setUserData(UserClass.fromJson(parsedData));\n        }\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n      } finally {\n        setIsLoading(false); // Stop loading after fetching data\n      }\n    };\n\n    // Simulate progress over 1500ms\n    const totalDuration = 1500; // Total time for loading (in ms)\n    const intervalDuration = 100; // Interval time for updating progress (in ms)\n    const increment = 100 / (totalDuration / intervalDuration); // Calculate increment per interval\n\n    const interval = setInterval(() => {\n      setProcessing((prev) => {\n        const nextValue = prev + increment;\n        if (nextValue >= 100) {\n          clearInterval(interval); // Stop interval when progress reaches 100%\n          return 100;\n        }\n        return nextValue;\n      });\n    }, intervalDuration);\n\n    // Fetch user data after 1500ms\n    const timeout = setTimeout(() => {\n      fetchUserData(); // Fetch user data\n    }, totalDuration);\n\n    // Cleanup intervals and timeouts on component unmount\n    return () => {\n      clearInterval(interval);\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  useEffect(() => {\n    const effectAsync = async () => {\n      if (userData) {\n        setBirthDate(userData.dateOfBirth || \"\");\n        await fetchAndSetCubes(userData);\n        setIsLoading(false);\n        console.log(\"loading finished\");\n      } else {\n        console.log(\"wrong userdata\");\n      }\n    };\n    effectAsync();\n  }, [userData]);\n\n  useEffect(() => {\n    if (userData) {\n      const list: CubeClass[] = [];\n      console.log(\"existingCubeList\", existingCubeList);\n      dates.forEach((date) => {\n        const index = existingCubeList.findIndex((c: CubeClass) => {\n          const cubeDate = c.date.split(\"T\")[0]; // 提取日期部分\n          return cubeDate === date;\n        });\n        if (index !== -1) {\n          list.push(existingCubeList[index]);\n        } else {\n          list.push(\n            new CubeClass(-1, userData?.id, \"My Cube\", date, 0, \"OPENING\")\n          );\n        }\n      });\n      console.log(\"list\", list);\n      setCubeList(list);\n    }\n  }, [existingCubeList, dates]);\n\n  const fetchAndSetCubes = async (userData: UserClass) => {\n    const shownDates = [];\n\n    for (let i = 0; i < dateNum; i++) {\n      shownDates.push(\n        dayjs(currentDate).subtract(i, \"day\").format(\"YYYY-MM-DD\")\n      );\n    }\n    const reversedDates = shownDates.reverse();\n    console.log(\"dates\", reversedDates);\n    setDates(reversedDates);\n    const cubes = await getCubesById(userData.id);\n    setExistingCubeList(cubes);\n  };\n\n  const focusDate = () => {\n    const id = calculateLifeDay(birthDate, currentDate);\n    setDateNum(id);\n    const targetDiv = document.getElementById(`${id}`);\n    if (targetDiv) {\n      targetDiv.scrollIntoView({ behavior: \"smooth\" }); // Smooth scrolling\n    }\n  };\n\n  // Function to calculate the life day\n  const calculateLifeDay = (birthday: string, targetDate: string) => {\n    const birthDate = new Date(birthday); // Convert birthday to Date object\n    const target = new Date(targetDate); // Convert target date to Date object\n\n    // Ensure target date is not earlier than the birthday\n    if (target < birthDate) {\n      return -1; // Return -1 to indicate an invalid date\n    }\n\n    // Calculate the difference in milliseconds\n    const differenceInMilliseconds = target.getTime() - birthDate.getTime();\n\n    // Convert milliseconds to days (add 1 to count the birthday as the first day)\n    const dayNumber =\n      Math.floor(differenceInMilliseconds / (1000 * 60 * 60 * 24)) + 1;\n\n    return dayNumber;\n  };\n\n  const getCubesById = async (userId: string): Promise<CubeClass[]> => {\n    try {\n      // Build the query URL with the userId\n      const url = `/api/cube/get_all_cubes?userId=${userId}`;\n\n      // Make the GET request\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      // Check if the response is okay\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to fetch cubes\");\n      }\n\n      // Parse the JSON data from the API response\n      const { data } = await response.json();\n\n      // Convert each item in the data array into an instance of CubeClass\n      const cubes = data.map((item: any) => CubeClass.fromJson(item));\n\n      // Return the array of CubeClass instances\n      return cubes;\n    } catch (error: any) {\n      console.error(\"Error fetching cubes:\", error.message);\n\n      // Return an empty array to handle errors gracefully\n      return [];\n    }\n  };\n\n  // Get tasks for the selected date\n  // const selectedTasks = taskData[selectedDate] || [];\n\n  // Loading screen\n  if (isLoading || userData === undefined) {\n    return (\n       <LoadingPage processing={processing} />\n    );\n  } else\n    return (\n      <div className=\"flex\">\n        <StarBackground />\n        <div className=\"w-full h-screen overflow-y-auto\">\n          <div className=\"grid grid-cols-10\">\n            {dates.map((date, index) => {\n              const key = calculateLifeDay(birthDate, date);\n              return (\n                <Cube\n                  key={key}\n                  order={key}\n                  user={userData}\n                  cube={cubeList[index]}\n                />\n              );\n            })}\n          </div>\n          <div className=\"h-12\"></div>\n        </div>\n        <div\n          className=\"absolute flex w-full items-center justify-center bottom-0 bg-yellow-500 hover:bg-white hover:text-yellow-500 hover:cursor-pointer\"\n          onClick={focusDate}\n        >\n          <SunIcon className=\"h-10 w-10\" />\n        </div>\n      </div>\n    );\n};\n\nexport default SolarPanels;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1964, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}