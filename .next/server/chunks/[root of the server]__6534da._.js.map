{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/lib/mysql.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\n\nconst connection = mysql.createPool({\n    host: process.env.MYSQL_HOST,\n    user: process.env.MYSQL_USER,\n    password: process.env.MYSQL_PASSWORD,\n    database: process.env.MYSQL_DATABASE,\n});\n\nexport default connection;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAChC,MAAM,QAAQ,GAAG,CAAC,UAAU;IAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU;IAC5B,UAAU,QAAQ,GAAG,CAAC,cAAc;IACpC,UAAU,QAAQ,GAAG,CAAC,cAAc;AACxC;uCAEe"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/app/api/cube/get_all_cubes/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'; // For sending API responses\nimport connection from '@/lib/mysql'; // Your database connection utility\n\nexport async function GET(req: Request) {\n    try {\n        const { searchParams } = new URL(req.url);\n        const userId = searchParams.get('userId'); // 获取 userId 参数\n\n        // 验证需要的参数\n        if (!userId) {\n            return NextResponse.json(\n                { error: 'UserId is required' },\n                { status: 400 }\n            );\n        }\n\n        // 查询数据库，获取某个用户的所有 Cubes 数据\n        const query = `\n            SELECT * FROM Cubes\n            WHERE userId = ?\n        `;\n        const [rows]: any = await connection.query(query, [userId]);\n\n        // 返回查询结果\n        return NextResponse.json({ data: rows }, { status: 200 });\n    } catch (error: any) {\n        console.error('Error fetching records:', error);\n        return NextResponse.json(\n            { error: 'Failed to fetch records', details: error.message },\n            { status: 500 }\n        );\n    }\n}\n"],"names":[],"mappings":";;;AAAA,+NAA4C,4BAA4B;AACxE,yMAAsC,mCAAmC;;;AAElE,eAAe,IAAI,GAAY;IAClC,IAAI;QACA,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,SAAS,aAAa,GAAG,CAAC,WAAW,eAAe;QAE1D,UAAU;QACV,IAAI,CAAC,QAAQ;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAEtB;QAEA,2BAA2B;QAC3B,MAAM,QAAQ,CAAC;;;QAGf,CAAC;QACD,MAAM,CAAC,KAAK,GAAQ,MAAM,qHAAA,CAAA,UAAU,CAAC,KAAK,CAAC,OAAO;YAAC;SAAO;QAE1D,SAAS;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,MAAM;QAAK,GAAG;YAAE,QAAQ;QAAI;IAC3D,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;YAA2B,SAAS,MAAM,OAAO;QAAC,GAC3D;YAAE,QAAQ;QAAI;IAEtB;AACJ"}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}