{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/lib/mysql.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\n\nconst connection = mysql.createPool({\n    host: process.env.MYSQL_HOST,\n    user: process.env.MYSQL_USER,\n    password: process.env.MYSQL_PASSWORD,\n    database: process.env.MYSQL_DATABASE,\n});\n\nexport default connection;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAChC,MAAM,QAAQ,GAAG,CAAC,UAAU;IAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU;IAC5B,UAAU,QAAQ,GAAG,CAAC,cAAc;IACpC,UAAU,QAAQ,GAAG,CAAC,cAAc;AACxC;uCAEe"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/modules/UserClass.ts"],"sourcesContent":["// /models/user.ts\n\nexport default class UserClass {\n    id: string;\n    username: string;\n    email: string;\n    password: string;\n    contact?: string;\n    gender?: string;\n    dateOfBirth?: string;\n    bio?: string;\n\n    constructor(\n        id: string,\n        username: string,\n        email: string,\n        password: string,\n        contact?: string,\n        gender?: string,\n        dateOfBirth?: string,\n        bio?: string\n    ) {\n        this.id = id;\n        this.username = username;\n        this.email = email;\n        this.password = password;\n        this.contact = contact;\n        this.gender = gender;\n        this.dateOfBirth = dateOfBirth;\n        this.bio = bio;\n    }\n\n    // Method to convert the instance to JSON\n    toJson(): object {\n        return {\n            id: this.id,\n            username: this.username,\n            email: this.email,\n            password: this.password,\n            contact: this.contact,\n            gender: this.gender,\n            dateOfBirth: this.dateOfBirth,\n            bio: this.bio,\n        };\n    }\n\n    // Static method to create an instance from JSON\n    static fromJson(json: any): UserClass {\n        return new UserClass(\n            json.id,\n            json.username,\n            json.email,\n            json.password,\n            json.contact,\n            json.gender,\n            json.dateOfBirth,\n            json.bio\n        );\n    }\n}\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAEH,MAAM;IACjB,GAAW;IACX,SAAiB;IACjB,MAAc;IACd,SAAiB;IACjB,QAAiB;IACjB,OAAgB;IAChB,YAAqB;IACrB,IAAa;IAEb,YACI,EAAU,EACV,QAAgB,EAChB,KAAa,EACb,QAAgB,EAChB,OAAgB,EAChB,MAAe,EACf,WAAoB,EACpB,GAAY,CACd;QACE,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,GAAG,GAAG;IACf;IAEA,yCAAyC;IACzC,SAAiB;QACb,OAAO;YACH,IAAI,IAAI,CAAC,EAAE;YACX,UAAU,IAAI,CAAC,QAAQ;YACvB,OAAO,IAAI,CAAC,KAAK;YACjB,UAAU,IAAI,CAAC,QAAQ;YACvB,SAAS,IAAI,CAAC,OAAO;YACrB,QAAQ,IAAI,CAAC,MAAM;YACnB,aAAa,IAAI,CAAC,WAAW;YAC7B,KAAK,IAAI,CAAC,GAAG;QACjB;IACJ;IAEA,gDAAgD;IAChD,OAAO,SAAS,IAAS,EAAa;QAClC,OAAO,IAAI,UACP,KAAK,EAAE,EACP,KAAK,QAAQ,EACb,KAAK,KAAK,EACV,KAAK,QAAQ,EACb,KAAK,OAAO,EACZ,KAAK,MAAM,EACX,KAAK,WAAW,EAChB,KAAK,GAAG;IAEhB;AACJ"}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/app/api/auth/sign_in/route.ts"],"sourcesContent":["// src/app/api/login/route.ts\nimport { NextResponse } from 'next/server';\nimport { cookies } from 'next/headers';\nimport bcrypt from 'bcryptjs';\nimport connection from '@/lib/mysql';\nimport UserClass from '@/modules/UserClass';\nimport jwt from 'jsonwebtoken';\n\n// Secret key for signing JWT (store this securely, e.g., in environment variables)\nconst JWT_SECRET = process.env.JWT_SECRET || 'your_secret_key';\n\nexport async function POST(req: Request) {\n    try {\n        const { email, password } = await req.json();\n\n        // Validate provided email and password\n        if (!email || !password) {\n            return NextResponse.json(\n                { error: 'Email and Password are required' },\n                { status: 400 } // Bad Request\n            );\n        }\n\n        // Fetch user by email\n        const [rows] = await connection.query('SELECT * FROM users WHERE email = ?', [email]);\n        const userRecord = (rows as any[])[0];\n\n        if (!userRecord) {\n            return NextResponse.json(\n                { error: 'Invalid email or password' },\n                { status: 401 } // Unauthorized\n            );\n        }\n\n        // Compare the password\n        const isPasswordValid = await bcrypt.compare(password, userRecord.password);\n\n        if (!isPasswordValid) {\n            return NextResponse.json(\n                { error: 'Invalid email or password' },\n                { status: 401 } // Unauthorized\n            );\n        }\n\n        // Generate JWT token (expires in 1 day)\n        const token = jwt.sign(\n            {\n                id: userRecord.id,\n                email: userRecord.email,\n                username: userRecord.username,\n            },\n            JWT_SECRET,\n            { expiresIn: '1h' } // Token expires in 1 day\n        );\n\n        // 设置HTTP-Only Cookie\n        (await cookies()).set('token', token, {\n            httpOnly: true,\n            secure: process.env.NODE_ENV === 'production', // 仅在HTTPS中传输\n            maxAge: 60 * 60, \n            path: '/', // Cookie的路径\n            sameSite: 'strict', // 防止CSRF攻击\n        });\n\n        // Prepare and return a `User` object (excluding password for security)\n        const user = new UserClass(\n            userRecord.id,\n            userRecord.username,\n            userRecord.email,\n            '',\n            userRecord.contact,\n            userRecord.gender,\n            userRecord.date_of_birth,\n            userRecord.bio\n        );\n\n        return NextResponse.json(\n            { message: 'Login successful', user },\n            { status: 200 }\n        );\n\n    } catch (error) {\n        console.error('Error during login:', error);\n        return NextResponse.json(\n            { error: 'An unexpected error occurred' },\n            { status: 500 } // Internal Server Error\n        );\n    }\n}\n  "],"names":[],"mappings":"AAAA,6BAA6B;;;;AAC7B;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEA,mFAAmF;AACnF,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,eAAe,KAAK,GAAY;IACnC,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE1C,uCAAuC;QACvC,IAAI,CAAC,SAAS,CAAC,UAAU;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI,EAAE,cAAc;;QAEtC;QAEA,sBAAsB;QACtB,MAAM,CAAC,KAAK,GAAG,MAAM,qHAAA,CAAA,UAAU,CAAC,KAAK,CAAC,uCAAuC;YAAC;SAAM;QACpF,MAAM,aAAa,AAAC,IAAc,CAAC,EAAE;QAErC,IAAI,CAAC,YAAY;YACb,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI,EAAE,eAAe;;QAEvC;QAEA,uBAAuB;QACvB,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,WAAW,QAAQ;QAE1E,IAAI,CAAC,iBAAiB;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ;YAAI,EAAE,eAAe;;QAEvC;QAEA,wCAAwC;QACxC,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAClB;YACI,IAAI,WAAW,EAAE;YACjB,OAAO,WAAW,KAAK;YACvB,UAAU,WAAW,QAAQ;QACjC,GACA,YACA;YAAE,WAAW;QAAK,EAAE,yBAAyB;;QAGjD,qBAAqB;QACrB,CAAC,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,SAAS,OAAO;YAClC,UAAU;YACV,QAAQ,oDAAyB;YACjC,QAAQ,KAAK;YACb,MAAM;YACN,UAAU;QACd;QAEA,uEAAuE;QACvE,MAAM,OAAO,IAAI,6HAAA,CAAA,UAAS,CACtB,WAAW,EAAE,EACb,WAAW,QAAQ,EACnB,WAAW,KAAK,EAChB,IACA,WAAW,OAAO,EAClB,WAAW,MAAM,EACjB,WAAW,aAAa,EACxB,WAAW,GAAG;QAGlB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,SAAS;YAAoB;QAAK,GACpC;YAAE,QAAQ;QAAI;IAGtB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI,EAAE,wBAAwB;;IAEhD;AACJ"}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}