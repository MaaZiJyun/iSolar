{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/lib/mysql.ts"],"sourcesContent":["import mysql from 'mysql2/promise';\n\nconst connection = mysql.createPool({\n    host: process.env.MYSQL_HOST,\n    user: process.env.MYSQL_USER,\n    password: process.env.MYSQL_PASSWORD,\n    database: process.env.MYSQL_DATABASE,\n});\n\nexport default connection;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAChC,MAAM,QAAQ,GAAG,CAAC,UAAU;IAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU;IAC5B,UAAU,QAAQ,GAAG,CAAC,cAAc;IACpC,UAAU,QAAQ,GAAG,CAAC,cAAc;AACxC;uCAEe"}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///Users/domuki/Documents/Project/Selfware/src/app/api/tasks/get_task/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport connection from '@/lib/mysql'; // Path to your database utility\n\nexport async function GET(req: Request) {\n    try {\n        const { searchParams } = new URL(req.url);\n        const date = searchParams.get('date');\n        const userId = searchParams.get('userId');\n\n        if (!userId || !date) {\n            return NextResponse.json({ error: 'User ID and Date are required' }, { status: 400 });\n        }\n\n        // Query to retrieve tasks by user ID and date\n        const query = `\n            SELECT * FROM Tasks\n            WHERE user_id = ? AND date = ?\n        `;\n\n        // Execute the query\n        const [results] = await connection.query(query, [userId, date]);\n\n        // Return the tasks as JSON\n        return NextResponse.json(results, { status: 200 });\n    } catch (error) {\n        console.error('Error fetching tasks by date:', error);\n        return NextResponse.json({ error: 'Failed to fetch tasks', details: (error as Error).message }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":";;;AAAA;AACA,yMAAsC,gCAAgC;;;AAE/D,eAAe,IAAI,GAAY;IAClC,IAAI;QACA,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,OAAO,aAAa,GAAG,CAAC;QAC9B,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,IAAI,CAAC,UAAU,CAAC,MAAM;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QACvF;QAEA,8CAA8C;QAC9C,MAAM,QAAQ,CAAC;;;QAGf,CAAC;QAED,oBAAoB;QACpB,MAAM,CAAC,QAAQ,GAAG,MAAM,qHAAA,CAAA,UAAU,CAAC,KAAK,CAAC,OAAO;YAAC;YAAQ;SAAK;QAE9D,2BAA2B;QAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IACpD,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAyB,SAAS,AAAC,MAAgB,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IAClH;AACJ"}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}