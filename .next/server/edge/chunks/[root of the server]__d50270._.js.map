{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { jwtVerify } from 'jose';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your_secret_key';\n\n// List of public routes\nconst PUBLIC_ROUTES = ['/sign_in', '/sign_up', '/'];\n\nasync function verifyToken(token: string) {\n  try {\n    // 使用 jose 验证 JWT\n    const secret = new TextEncoder().encode(JWT_SECRET); // 将密钥转换为 Uint8Array\n    const { payload } = await jwtVerify(token, secret); // 验证 Token\n    return payload; // 返回解码后的 Token 数据\n  } catch (err: unknown) {\n    if (err instanceof Error) {\n      console.log('Token verification failed or expired:', err.message);\n    }\n    return null; // 验证失败\n  }\n}\n\nexport async function middleware(req: NextRequest) {\n\n  const { pathname } = req.nextUrl; // Get the current route\n\n  console.log(pathname);\n\n  // Allow access to public routes (sign_in, sign_up, index)\n  if (PUBLIC_ROUTES.includes(pathname)) {\n    return NextResponse.next();\n  }\n\n  // Get token from cookies\n  const token = req.cookies.get('token')?.value; // Use cookies instead of localStorage for better security\n\n  if (!token) {\n    // Redirect to sign-in if no token is found\n    const loginUrl = new URL('/sign_in', req.url);\n    return NextResponse.redirect(loginUrl);\n  }\n\n  // Check if token is valid and unexpired\n  const verifiedToken = await verifyToken(token);\n  if (!verifiedToken) {\n    // Redirect to sign-in if token is invalid or expired\n    const loginUrl = new URL('/sign_in', req.url);\n    return NextResponse.redirect(loginUrl); // Token 过期，重新登录\n  }\n\n  // If token is valid, allow access\n  return NextResponse.next();\n}\n\n// Matching all routes with middleware\nexport const config = {\n  matcher: ['/((?!api|_next/static|favicon.ico).*)'],\n};\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AADA;;;AAGA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAE7C,wBAAwB;AACxB,MAAM,gBAAgB;IAAC;IAAY;IAAY;CAAI;AAEnD,eAAe,YAAY,KAAa;IACtC,IAAI;QACF,iBAAiB;QACjB,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC,aAAa,oBAAoB;QACzE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,wJAAA,CAAA,YAAS,AAAD,EAAE,OAAO,SAAS,WAAW;QAC/D,OAAO,SAAS,kBAAkB;IACpC,EAAE,OAAO,KAAc;QACrB,IAAI,eAAe,OAAO;YACxB,QAAQ,GAAG,CAAC,yCAAyC,IAAI,OAAO;QAClE;QACA,OAAO,MAAM,OAAO;IACtB;AACF;AAEO,eAAe,WAAW,GAAgB;IAE/C,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO,EAAE,wBAAwB;IAE1D,QAAQ,GAAG,CAAC;IAEZ,0DAA0D;IAC1D,IAAI,cAAc,QAAQ,CAAC,WAAW;QACpC,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,yBAAyB;IACzB,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,OAAO,0DAA0D;IAEzG,IAAI,CAAC,OAAO;QACV,2CAA2C;QAC3C,MAAM,WAAW,IAAI,IAAI,YAAY,IAAI,GAAG;QAC5C,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,wCAAwC;IACxC,MAAM,gBAAgB,MAAM,YAAY;IACxC,IAAI,CAAC,eAAe;QAClB,qDAAqD;QACrD,MAAM,WAAW,IAAI,IAAI,YAAY,IAAI,GAAG;QAC5C,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,WAAW,gBAAgB;IAC1D;IAEA,kCAAkC;IAClC,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAwC;AACpD"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}